from pymessaginglib.Topic import TopicObserver, topic_factory, Topic
from rov_logger.logger import get_rov_logger
from rov_multiserver.vehicle_link_base import IVehicleLink

logger = get_rov_logger()
TOPIC_NAME: str = "/client/vehicle_settings/"


class VehicleLinkConfigurationListener(TopicObserver):
    """
    Simple topic observer for /client/vehicle_settings/ topic.

    This observer updates the VehicleLink configuration from the
    messages that are generated by a client. It's attached to the
    corresponding topic at creation time.

    Parameters
    ----------
    link: IVehicleLink
        The IVehicleLink instance to update.
    """
    def __init__(self, link: IVehicleLink):
        """Constructor method."""
        if not isinstance(link, IVehicleLink):
            error_msg = f"Expecting a IVehicleLink instance but receiving a " \
                        f"'{type(link).__name__}' object"
            logger.error(error_msg)
            raise TypeError(error_msg)
        self.__link = link
        topic: Topic = topic_factory.create_topic(TOPIC_NAME)
        topic.attach(self)

    def detach(self):
        """
        Detaches from topic.

        i.e.: Messages for that topic will stop calling this observer.
        """
        topic_factory.create_topic(TOPIC_NAME).detach(self)

    def on_message_arrival(self, dic: dict, ip: str):
        """
        Main callback for topic messages.

        The valid keys are:
        * **yaw_fixed_power**: It expects a float between 0 and 1.
          For any value > 0 it fixes the power on yaw axis (i.e.: use a
          fixed power for any input intensity != 0, ignoring the input
          gain). If it is set to 0 it behaves identically as the other axes.

        Parameters
        ----------
        dic: dict
            The message as a dict.
        ip: str
            The message sender host's IP address.
        """
        if 'yaw_fixed_power' in dic:
            power = dic['yaw_fixed_power']
            if 0 < power <= 1:
                self.link.fixed_yaw_power = True
                self.link.fixed_yaw_power_factor = float(power)
                logger.info(f"Fixing yaw turning power to {power * 100.0}%")
            elif power == 0:
                self.link.fixed_yaw_power = False
                logger.info(f"Un-fixing yaw turning power.")
        elif 'speed_smoother_acceleration_rate' in dic:
            self.link.acceleration_rate = \
                dic['speed_smoother_acceleration_rate']
        elif 'speed_smoother_acceleration_start_threshold' in dic:
            self.link.acceleration_start_threshold = \
                dic['speed_smoother_acceleration_start_threshold']
        elif 'speed_smoother_acceleration_stop_threshold' in dic:
            self.link.acceleration_stop_threshold = \
                dic['speed_smoother_acceleration_stop_threshold']
        elif 'speed_smoother_deceleration_rate' in dic:
            self.link.deceleration_rate = \
                dic['speed_smoother_deceleration_rate']
        elif 'speed_smoother_deceleration_start_threshold' in dic:
            self.link.deceleration_start_threshold = \
                dic['speed_smoother_deceleration_start_threshold']
        elif 'speed_smoother_deceleration_stop_threshold' in dic:
            self.link.deceleration_stop_threshold = \
                dic['speed_smoother_deceleration_stop_threshold']

    @property
    def link(self) -> IVehicleLink:
        """The VehicleLink instance to update."""
        return self.__link
